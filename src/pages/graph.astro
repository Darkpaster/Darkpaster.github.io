<!--graph.astro-->
---
import BaseLayout from '@/layouts/BaseLayout.astro';
import GraphVisualization from '@/components/GraphVisualization.astro';
import { getCollection } from 'astro:content';

// Get all topics for the graph
const allTopics = await getCollection('topics', ({ data }) => !data.draft);

// Transform topics data for the graph visualization
const graphData = {
    nodes: allTopics.map(topic => ({
        id: topic.slug,
        label: topic.data.title,
        level: topic.data.level,
        category: topic.data.category || 'other',
        tags: topic.data.tags,
        difficulty: topic.data.difficulty,
        url: `/topics/${topic.slug}`,
        meme: topic.data.meme
    })),
    edges: []
};

// Create edges based on related topics
allTopics.forEach(topic => {
    if (topic.data.related) {
        topic.data.related.forEach(relatedSlug => {
            const cleanSlug = relatedSlug.replace('/topics/', '');
            const targetTopic = allTopics.find(t => t.slug === cleanSlug);
            if (targetTopic) {
                graphData.edges.push({
                    source: topic.slug,
                    target: targetTopic.slug,
                    type: 'related'
                });
            }
        });
    }

    // Create edges based on shared tags (if topics have 2+ common tags)
    allTopics.forEach(otherTopic => {
        if (topic.slug !== otherTopic.slug) {
            const commonTags = topic.data.tags.filter(tag =>
                otherTopic.data.tags.includes(tag)
            );
            if (commonTags.length >= 2) {
                const edgeExists = graphData.edges.some(edge =>
                    (edge.source === topic.slug && edge.target === otherTopic.slug) ||
                    (edge.source === otherTopic.slug && edge.target === topic.slug)
                );
                if (!edgeExists) {
                    graphData.edges.push({
                        source: topic.slug,
                        target: otherTopic.slug,
                        type: 'tag-similarity',
                        weight: commonTags.length
                    });
                }
            }
        }
    });
});

// Statistics
const stats = {
    totalNodes: graphData.nodes.length,
    totalEdges: graphData.edges.length,
    categories: [...new Set(graphData.nodes.map(n => n.category))].length,
    avgConnections: Math.round(graphData.edges.length * 2 / graphData.nodes.length * 10) / 10
};
---

<BaseLayout
        title="–ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π - HumanityOS"
        description="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏ –∏ —Ç–µ–º–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∑–Ω–∞–Ω–∏–π"
>
    <div class="container">
        <!-- Header -->
        <section class="header-section">
            <h1 class="main-title">üï∏Ô∏è –ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π</h1>
            <p class="main-description">
                –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏ –∏ –∏–¥–µ—è–º–∏ (–±–µ—Ç–∞)
            </p>

            <!-- Stats -->
            <div class="stats-container">
                <div class="stat-item">
                    <div class="stat-title">–£–∑–ª–æ–≤</div>
                    <div class="stat-value stat-primary">{stats.totalNodes}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-title">–°–≤—è–∑–µ–π</div>
                    <div class="stat-value stat-secondary">{stats.totalEdges}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-title">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
                    <div class="stat-value stat-accent">{stats.categories}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-title">–°—Ä. —Å–≤—è–∑–µ–π</div>
                    <div class="stat-value stat-info">{stats.avgConnections}</div>
                </div>
            </div>
        </section>

        <!-- Controls -->
        <!--<section class="controls-section">-->
        <!--    <div class="controls-card">-->
        <!--        <div class="controls-body">-->
        <!--            <div class="controls-wrapper">-->
        <!--                <div class="form-group">-->
        <!--                    <label class="form-label">-->
        <!--                        <span class="label-text">–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</span>-->
        <!--                    </label>-->
        <!--                    <select id="categoryFilter" class="select-input">-->
        <!--                        <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>-->
        <!--                        <option value="cognition">üß† –ü–æ–∑–Ω–∞–Ω–∏–µ</option>-->
        <!--                        <option value="society">üèõÔ∏è –û–±—â–µ—Å—Ç–≤–æ</option>-->
        <!--                        <option value="technology">‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</option>-->
        <!--                        <option value="philosophy">üí≠ –§–∏–ª–æ—Å–æ—Ñ–∏—è</option>-->
        <!--                        <option value="meta">üìã META</option>-->
        <!--                    </select>-->
        <!--                </div>-->

        <!--                <div class="form-group">-->
        <!--                    <label class="form-label">-->
        <!--                        <span class="label-text">–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</span>-->
        <!--                    </label>-->
        <!--                    <select id="levelFilter" class="select-input">-->
        <!--                        <option value="">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>-->
        <!--                        <option value="1">–£—Ä–æ–≤–µ–Ω—å 1</option>-->
        <!--                        <option value="2">–£—Ä–æ–≤–µ–Ω—å 2</option>-->
        <!--                        <option value="3">–£—Ä–æ–≤–µ–Ω—å 3</option>-->
        <!--                        <option value="4">–£—Ä–æ–≤–µ–Ω—å 4</option>-->
        <!--                        <option value="5">–£—Ä–æ–≤–µ–Ω—å 5</option>-->
        <!--                    </select>-->
        <!--                </div>-->

        <!--                <div class="form-group">-->
        <!--                    <label class="form-label">-->
        <!--                        <span class="label-text">–ü–æ–∏—Å–∫:</span>-->
        <!--                    </label>-->
        <!--                    <input id="searchInput" type="text" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º..." class="text-input" />-->
        <!--                </div>-->

        <!--                <div class="button-group">-->
        <!--                    <button id="resetZoom" class="btn btn-outline">-->
        <!--                        üîç –°–±—Ä–æ—Å–∏—Ç—å zoom-->
        <!--                    </button>-->
        <!--                    <button id="togglePhysics" class="btn btn-outline">-->
        <!--                        ‚ö° –§–∏–∑–∏–∫–∞: –í–ö–õ-->
        <!--                    </button>-->
        <!--                </div>-->
        <!--            </div>-->
        <!--        </div>-->
        <!--    </div>-->
        <!--</section>-->

        <!-- Graph Container -->
        <!--<section class="graph-section">-->
        <!--    <div class="graph-card">-->
        <!--        <div class="graph-card-body">-->
        <!--            <div id="graph-container" class="graph-container">-->
        <!--                &lt;!&ndash; Loading state &ndash;&gt;-->
        <!--                <div id="loading" class="loading-state">-->
        <!--                    <div class="spinner"></div>-->
        <!--                    <span class="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞...</span>-->
        <!--                </div>-->

        <!--                &lt;!&ndash; Graph canvas &ndash;&gt;-->
        <!--                <canvas id="graph-canvas" class="graph-canvas"></canvas>-->

        <!--                &lt;!&ndash; Node info panel &ndash;&gt;-->
        <!--                <div id="node-info" class="node-info-panel hidden">-->
        <!--                    <div class="node-info-body">-->
        <!--                        <h3 id="node-title" class="node-info-title"></h3>-->
        <!--                        <div id="node-details" class="node-details">-->
        <!--                            <div id="node-level"></div>-->
        <!--                            <div id="node-category"></div>-->
        <!--                            <div id="node-tags"></div>-->
        <!--                        </div>-->
        <!--                        <div class="node-actions">-->
        <!--                            <a id="node-link" href="#" class="btn btn-primary">–û—Ç–∫—Ä—ã—Ç—å</a>-->
        <!--                        </div>-->
        <!--                    </div>-->
        <!--                </div>-->
        <!--            </div>-->
        <!--        </div>-->
        <!--    </div>-->
        <!--</section>-->
        <GraphVisualization></GraphVisualization>

        <!-- Legend -->
        <section>
            <div class="legend-card">
                <div class="legend-body">
                    <h2 class="legend-title">üìñ –õ–µ–≥–µ–Ω–¥–∞</h2>

                    <div class="legend-grid">
                        <!-- Node colors -->
                        <div>
                            <h3 class="legend-subtitle">üé® –¶–≤–µ—Ç–∞ —É–∑–ª–æ–≤ (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)</h3>
                            <div class="legend-items">
                                <div class="legend-item">
                                    <div class="color-dot color-blue"></div>
                                    <span>üß† –ü–æ–∑–Ω–∞–Ω–∏–µ</span>
                                </div>
                                <div class="legend-item">
                                    <div class="color-dot color-green"></div>
                                    <span>üèõÔ∏è –û–±—â–µ—Å—Ç–≤–æ</span>
                                </div>
                                <div class="legend-item">
                                    <div class="color-dot color-yellow"></div>
                                    <span>‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</span>
                                </div>
                                <div class="legend-item">
                                    <div class="color-dot color-purple"></div>
                                    <span>üí≠ –§–∏–ª–æ—Å–æ—Ñ–∏—è</span>
                                </div>
                                <div class="legend-item">
                                    <div class="color-dot color-red"></div>
                                    <span>üìã META</span>
                                </div>
                            </div>
                        </div>

                        <!-- Connections -->
                        <!--<div>-->
                        <!--    <h3 class="legend-subtitle">üîó –¢–∏–ø—ã —Å–≤—è–∑–µ–π</h3>-->
                        <!--    <div class="legend-items">-->
                        <!--        <div class="legend-item">-->
                        <!--            <div class="connection-line connection-solid"></div>-->
                        <!--            <span>–ü—Ä—è–º—ã–µ —Å–≤—è–∑–∏ (related)</span>-->
                        <!--        </div>-->
                        <!--        <div class="legend-item">-->
                        <!--            <div class="connection-line connection-dashed"></div>-->
                        <!--            <span>–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ (–æ–±—â–∏–µ —Ç–µ–≥–∏)</span>-->
                        <!--        </div>-->
                        <!--    </div>-->
                        <!--</div>-->
                    </div>

                    <div class="tips-section">
                        <p class="tips-title"><strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:</strong></p>
                        <ul class="tips-list">
                            <li>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</li>
                            <li>–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —É–∑–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è</li>
                            <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è</li>
                            <li>–†–∞–∑–º–µ—Ä —É–∑–ª–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–µ–π</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <style>
        /* Container and Layout */
        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 0 16px;
        }

        /* Header Section */
        .header-section {
            text-align: center;
            margin-bottom: 32px;
        }

        .main-title {
            font-size: 2.25rem;
            font-weight: bold;
            margin-bottom: 16px;
            line-height: 1.2;
        }

        .main-description {
            font-size: 1.25rem;
            opacity: 0.7;
            margin-bottom: 24px;
            line-height: 1.5;
        }

        /* Stats */
        .stats-container {
            display: flex;
            justify-content: center;
            gap: 16px;
            margin-bottom: 24px;
            flex-wrap: wrap;
            background: var(--base-200, #f2f2f2);
            border-radius: 8px;
            padding: 16px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .stat-item {
            text-align: center;
            padding: 16px;
            min-width: 120px;
        }

        .stat-title {
            font-size: 0.875rem;
            opacity: 0.7;
            margin-bottom: 4px;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .stat-primary { color: var(--primary, #3b82f6); }
        .stat-secondary { color: var(--secondary, #f59e0b); }
        .stat-accent { color: var(--accent, #10b981); }
        .stat-info { color: var(--info, #06b6d4); }

        /* Controls Section */
        .controls-section {
            margin-bottom: 24px;
        }

        .controls-card {
            background: var(--base-100, #ffffff);
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .controls-body {
            padding: 24px;
        }

        .controls-wrapper {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 16px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .form-label {
            display: block;
        }

        .label-text {
            font-size: 0.875rem;
            font-weight: 500;
        }

        .select-input, .text-input {
            padding: 8px 12px;
            border: 1px solid var(--border, #d1d5db);
            border-radius: 6px;
            font-size: 0.875rem;
            background: var(--base-100, #ffffff);
        }

        .select-input:focus, .text-input:focus {
            outline: none;
            border-color: var(--primary, #3b82f6);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .button-group {
            display: flex;
            gap: 8px;
            margin-left: auto;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            border: none;
            transition: all 0.2s ease;
        }

        .btn-outline {
            background: transparent;
            border: 1px solid var(--border, #d1d5db);
            color: var(--text, #374151);
        }

        .btn-outline:hover {
            background: var(--base-200, #f2f2f2);
        }

        .btn-primary {
            background: var(--primary, #3b82f6);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark, #2563eb);
        }

        /* Graph Section */
        .graph-section {
            margin-bottom: 24px;
        }

        .graph-card {
            background: var(--base-100, #ffffff);
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .graph-card-body {
            padding: 0;
        }

        .graph-container {
            width: 100%;
            height: 600px;
            position: relative;
            overflow: hidden;
            border-radius: 8px;
            background: var(--base-200, #f2f2f2);
            background-image: radial-gradient(circle at 50% 50%, rgba(59, 130, 246, 0.05) 0%, transparent 50%);
        }

        .loading-state {
            position: absolute;
            inset: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .spinner {
            width: 24px;
            height: 24px;
            border: 2px solid var(--border, #d1d5db);
            border-top-color: var(--primary, #3b82f6);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .loading-text {
            font-size: 0.875rem;
        }

        .graph-canvas {
            position: absolute;
            inset: 0;
            width: 100%;
            height: 100%;
            cursor: grab;
        }

        .graph-canvas:active {
            cursor: grabbing;
        }

        /* Node Info Panel */
        .node-info-panel {
            position: absolute;
            top: 16px;
            right: 16px;
            max-width: 384px;
            background: var(--base-100, #ffffff);
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .node-info-body {
            padding: 16px;
        }

        .node-info-title {
            font-size: 1.125rem;
            font-weight: bold;
            margin-bottom: 12px;
        }

        .node-details {
            font-size: 0.875rem;
            margin-bottom: 16px;
        }

        .node-details > div {
            margin-bottom: 8px;
        }

        .node-actions {
            display: flex;
            justify-content: flex-end;
        }

        /* Legend */
        .legend-card {
            background: var(--base-100, #ffffff);
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .legend-body {
            padding: 24px;
        }

        .legend-title {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 16px;
        }

        .legend-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 24px;
        }

        .legend-subtitle {
            font-weight: bold;
            margin-bottom: 12px;
        }

        .legend-items {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .color-dot {
            width: 16px;
            height: 16px;
            border-radius: 50%;
        }

        .color-blue { background-color: #3b82f6; }
        .color-green { background-color: #10b981; }
        .color-yellow { background-color: #f59e0b; }
        .color-purple { background-color: #8b5cf6; }
        .color-red { background-color: #ef4444; }

        .connection-line {
            width: 24px;
            height: 2px;
        }

        .connection-solid {
            background-color: var(--primary, #3b82f6);
        }

        .connection-dashed {
            background-color: var(--secondary, #f59e0b);
            opacity: 0.6;
            background-image: linear-gradient(90deg, transparent 50%, var(--secondary, #f59e0b) 50%);
            background-size: 4px 2px;
        }

        .tips-section {
            margin-top: 24px;
            font-size: 0.875rem;
            opacity: 0.7;
        }

        .tips-title {
            margin-bottom: 8px;
        }

        .tips-list {
            list-style-type: disc;
            padding-left: 20px;
        }

        .tips-list li {
            margin-bottom: 4px;
        }

        /* Badges */
        .badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            font-size: 0.75rem;
            font-weight: 500;
            border-radius: 4px;
            margin-right: 4px;
            margin-bottom: 4px;
        }

        .badge-primary {
            background-color: var(--primary, #3b82f6);
            color: white;
        }

        .badge-secondary {
            background-color: var(--secondary, #f59e0b);
            color: white;
        }

        .badge-outline {
            background-color: transparent;
            border: 1px solid var(--border, #d1d5db);
            color: var(--text, #374151);
        }

        /* Utility Classes */
        .hidden {
            display: none !important;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 0 8px;
            }

            .main-title {
                font-size: 1.875rem;
            }

            .main-description {
                font-size: 1rem;
            }

            .stats-container {
                flex-direction: column;
                gap: 8px;
            }

            .controls-wrapper {
                flex-direction: column;
                align-items: stretch;
            }

            .button-group {
                margin-left: 0;
                justify-content: stretch;
            }

            .btn {
                flex: 1;
            }

            .legend-grid {
                grid-template-columns: 1fr;
            }

            .node-info-panel {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                right: auto;
                max-width: calc(100vw - 32px);
                z-index: 1000;
            }
        }
    </style>

    <script define:vars={{ graphData }}>
        class GraphVisualization {
            constructor(data, container) {
                this.data = data;
                this.container = container;
                this.width = container.clientWidth;
                this.height = container.clientHeight;
                this.physicsEnabled = true;

                this.categoryColors = {
                    cognition: '#3b82f6',
                    society: '#10b981',
                    technology: '#f59e0b',
                    philosophy: '#8b5cf6',
                    meta: '#ef4444',
                    other: '#6b7280'
                };

                this.init();
            }

            init() {
                // Setup canvas
                this.canvas = d3.select('#graph-canvas')
                    .attr('width', this.width)
                    .attr('height', this.height);

                this.context = this.canvas.node().getContext('2d');

                // Setup simulation
                this.simulation = d3.forceSimulation(this.data.nodes)
                    .force('link', d3.forceLink(this.data.edges).id(d => d.id).distance(80))
                    .force('charge', d3.forceManyBody().strength(-200))
                    .force('center', d3.forceCenter(this.width / 2, this.height / 2))
                    .force('collision', d3.forceCollide().radius(25))
                    .on('tick', () => this.draw());

                // Setup interactions
                this.setupInteractions();
                this.setupControls();

                // Hide loading
                document.getElementById('loading').classList.add('hidden');
            }

            draw() {
                const context = this.context;

                // Clear canvas
                context.clearRect(0, 0, this.width, this.height);
                context.save();

                // Draw edges
                context.strokeStyle = '#64748b';
                context.lineWidth = 1;
                this.data.edges.forEach(edge => {
                    if (edge.type === 'tag-similarity') {
                        context.setLineDash([5, 5]);
                        context.globalAlpha = 0.6;
                    } else {
                        context.setLineDash([]);
                        context.globalAlpha = 1;
                    }

                    context.beginPath();
                    context.moveTo(edge.source.x, edge.source.y);
                    context.lineTo(edge.target.x, edge.target.y);
                    context.stroke();
                });

                // Draw nodes
                context.setLineDash([]);
                context.globalAlpha = 1;
                this.data.nodes.forEach(node => {
                    const radius = Math.max(8, Math.min(20, 8 + node.level * 2));

                    // Node background
                    context.fillStyle = this.categoryColors[node.category] || this.categoryColors.other;
                    context.beginPath();
                    context.arc(node.x, node.y, radius, 0, 2 * Math.PI);
                    context.fill();

                    // Node border
                    context.strokeStyle = '#ffffff';
                    context.lineWidth = 2;
                    context.stroke();

                    // Node text
                    if (radius > 12) {
                        context.fillStyle = '#ffffff';
                        context.font = '10px Inter';
                        context.textAlign = 'center';
                        context.fillText(node.level.toString(), node.x, node.y + 3);
                    }
                });

                context.restore();
            }

            setupInteractions() {
                const canvas = this.canvas.node();

                // Mouse events
                canvas.addEventListener('click', (event) => {
                    const rect = canvas.getBoundingClientRect();
                    const x = event.clientX - rect.left;
                    const y = event.clientY - rect.top;

                    const node = this.findNodeAt(x, y);
                    if (node) {
                        this.showNodeInfo(node);
                    } else {
                        this.hideNodeInfo();
                    }
                });

                canvas.addEventListener('mousemove', (event) => {
                    const rect = canvas.getBoundingClientRect();
                    const x = event.clientX - rect.left;
                    const y = event.clientY - rect.top;

                    const node = this.findNodeAt(x, y);
                    canvas.style.cursor = node ? 'pointer' : 'grab';
                });

                // Drag behavior
                const drag = d3.drag()
                    .subject(() => {
                        const rect = canvas.getBoundingClientRect();
                        const x = d3.event.x - rect.left;
                        const y = d3.event.y - rect.top;
                        return this.findNodeAt(x, y);
                    })
                    .on('start', () => {
                        if (!d3.event.active && this.physicsEnabled) {
                            this.simulation.alphaTarget(0.3).restart();
                        }
                        d3.event.subject.fx = d3.event.subject.x;
                        d3.event.subject.fy = d3.event.subject.y;
                    })
                    .on('drag', () => {
                        const rect = canvas.getBoundingClientRect();
                        d3.event.subject.fx = d3.event.x - rect.left;
                        d3.event.subject.fy = d3.event.y - rect.top;
                    })
                    .on('end', () => {
                        if (!d3.event.active && this.physicsEnabled) {
                            this.simulation.alphaTarget(0);
                        }
                        d3.event.subject.fx = null;
                        d3.event.subject.fy = null;
                    });

                this.canvas.call(drag);

                // Zoom behavior
                const zoom = d3.zoom()
                    .scaleExtent([0.5, 3])
                    .on('zoom', () => {
                        const transform = d3.event.transform;
                        this.context.save();
                        this.context.clearRect(0, 0, this.width, this.height);
                        this.context.translate(transform.x, transform.y);
                        this.context.scale(transform.k, transform.k);
                        this.draw();
                        this.context.restore();
                    });

                this.canvas.call(zoom);
                this.zoomBehavior = zoom;
            }

            findNodeAt(x, y) {
                return this.data.nodes.find(node => {
                    const radius = Math.max(8, Math.min(20, 8 + node.level * 2));
                    const dx = x - node.x;
                    const dy = y - node.y;
                    return Math.sqrt(dx * dx + dy * dy) < radius;
                });
            }

            showNodeInfo(node) {
                const panel = document.getElementById('node-info');
                const title = document.getElementById('node-title');
                const level = document.getElementById('node-level');
                const category = document.getElementById('node-category');
                const tags = document.getElementById('node-tags');
                const link = document.getElementById('node-link');

                title.textContent = node.label;
                level.innerHTML = `<span class="badge badge-primary">–£—Ä–æ–≤–µ–Ω—å ${node.level}</span>`;
                category.innerHTML = `<span class="badge badge-secondary">${node.category}</span>`;
                tags.innerHTML = node.tags.map(tag =>
                    `<span class="badge badge-outline">${tag}</span>`
                ).join(' ');
                link.href = node.url;

                panel.classList.remove('hidden');
            }

            hideNodeInfo() {
                document.getElementById('node-info').classList.add('hidden');
            }

            setupControls() {
                // Category filter
                document.getElementById('categoryFilter').addEventListener('change', (e) => {
                    this.filterByCategory(e.target.value);
                });

                // Level filter
                document.getElementById('levelFilter').addEventListener('change', (e) => {
                    this.filterByLevel(e.target.value);
                });

                // Search
                document.getElementById('searchInput').addEventListener('input', (e) => {
                    this.search(e.target.value);
                });

                // Reset zoom
                document.getElementById('resetZoom').addEventListener('click', () => {
                    this.canvas.transition().duration(750).call(
                        this.zoomBehavior.transform,
                        d3.zoomIdentity
                    );
                });

                // Toggle physics
                document.getElementById('togglePhysics').addEventListener('click', (e) => {
                    this.physicsEnabled = !this.physicsEnabled;
                    e.target.textContent = this.physicsEnabled ? '‚ö° –§–∏–∑–∏–∫–∞: –í–ö–õ' : '‚ö° –§–∏–∑–∏–∫–∞: –í–´–ö–õ';

                    if (this.physicsEnabled) {
                        this.simulation.restart();
                    } else {
                        this.simulation.stop();
                    }
                });
            }

            filterByCategory(category) {
                this.data.nodes.forEach(node => {
                    node.visible = !category || node.category === category;
                });
                this.draw();
            }

            filterByLevel(level) {
                this.data.nodes.forEach(node => {
                    node.visible = !level || node.level.toString() === level;
                });
                this.draw();
            }

            search(query) {
                if (!query) {
                    this.data.nodes.forEach(node => node.highlighted = false);
                } else {
                    this.data.nodes.forEach(node => {
                        node.highlighted = node.label.toLowerCase().includes(query.toLowerCase());
                    });
                }
                this.draw();
            }
        }

        // Initialize graph when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('graph-container');
            new GraphVisualization(graphData, container);
        });
    </script>


    <!-- Include D3.js for graph visualization -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>



    </BaseLayout>