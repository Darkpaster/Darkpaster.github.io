<!--graph.astro-->
---
import BaseLayout from '@/layouts/BaseLayout.astro';
import GraphVisualization from '@/components/GraphVisualization.astro';
import { getCollection } from 'astro:content';
import { getLocale } from "astro-i18n-aut";

const currentLang = getLocale(Astro.url);

const allTopics = await getCollection('topics', ({ data }) => !data.draft && data.lang === currentLang);

type EdgeType = { source: string, target: string, type: string }

interface GraphDataType {
    nodes: unknown;
    edges: EdgeType[];
}

const graphData: GraphDataType = {
    nodes: allTopics.map(topic => ({
        id: topic.slug,
        label: topic.data.title,
        level: topic.data.level,
        category: topic.data.category || 'other',
        tags: topic.data.tags,
        difficulty: topic.data.difficulty,
        url: `/topics/${topic.slug}`,
        meme: topic.data.meme
    })),
    edges: []
};

// Create edges based on related topics
allTopics.forEach(topic => {
    if (topic.data.related) {
        topic.data.related.forEach(relatedSlug => {
            const cleanSlug = relatedSlug.replace('/topics/', '');
            const targetTopic = allTopics.find(t => t.slug === cleanSlug);
            if (targetTopic) {
                graphData.edges.push({
                    source: topic.slug,
                    target: targetTopic.slug,
                    type: 'related'
                });
            }
        });
    }

    // Create edges based on shared tags (if topics have 2+ common tags)
    allTopics.forEach(otherTopic => {
        if (topic.slug !== otherTopic.slug) {
            const commonTags = topic.data.tags.filter(tag =>
                otherTopic.data.tags.includes(tag)
            );
            if (commonTags.length >= 2) {
                const edgeExists = graphData.edges.some((edge: EdgeType) =>
                    (edge.source === topic.slug && edge.target === otherTopic.slug) ||
                    (edge.source === otherTopic.slug && edge.target === topic.slug)
                );
                if (!edgeExists) {
                    graphData.edges.push({
                        source: topic.slug,
                        target: otherTopic.slug,
                        type: 'tag-similarity',
                        weight: commonTags.length
                    });
                }
            }
        }
    });
});

const stats = {
    totalNodes: graphData.nodes.length,
    totalEdges: graphData.edges.length,
    categories: [...new Set(graphData.nodes.map(n => n.category))].length,
    avgConnections: Math.round(graphData.edges.length * 2 / graphData.nodes.length * 10) / 10
};

const texts = currentLang === 'ru' ? {
    title: '–ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π - HumanityOS',
    description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏ –∏ —Ç–µ–º–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∑–Ω–∞–Ω–∏–π',
    pageTitle: 'üï∏Ô∏è –ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π',
    pageDescription: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏ –∏ –∏–¥–µ—è–º–∏ (–±–µ—Ç–∞)',
    nodes: '–£–∑–ª–æ–≤',
    connections: '–°–≤—è–∑–µ–π',
    categories: '–ö–∞—Ç–µ–≥–æ—Ä–∏–π',
    avgConnections: '–°—Ä. —Å–≤—è–∑–µ–π',
    legend: 'üìñ –õ–µ–≥–µ–Ω–¥–∞',
    nodeColors: 'üé® –¶–≤–µ—Ç–∞ —É–∑–ª–æ–≤ (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)',
    tips: 'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:',
    tipsList: [
        '–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–∑–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        '–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —É–∑–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è',
        '–†–∞–∑–º–µ—Ä —É–∑–ª–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–µ–π'
    ],
    categories_info: {
        cognition: 'üß† –ü–æ–∑–Ω–∞–Ω–∏–µ',
        society: 'üèõÔ∏è –û–±—â–µ—Å—Ç–≤–æ',
        technology: '‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
        philosophy: 'üí≠ –§–∏–ª–æ—Å–æ—Ñ–∏—è',
        meta: 'üìã META'
    }
} : {
    title: 'Knowledge Graph - HumanityOS',
    description: 'Interactive visualization of connections between concepts and themes in the knowledge system',
    pageTitle: 'üï∏Ô∏è Knowledge Graph',
    pageDescription: 'Interactive map of connections between concepts and ideas (beta)',
    nodes: 'Nodes',
    connections: 'Connections',
    categories: 'Categories',
    avgConnections: 'Avg Connections',
    legend: 'üìñ Legend',
    nodeColors: 'üé® Node colors (by categories)',
    tips: 'üí° Tips:',
    tipsList: [
        'Click on a node to view information',
        'Drag nodes to change layout',
        'Use mouse wheel to zoom',
        'Node size depends on number of connections'
    ],
    categories_info: {
        cognition: 'üß† Cognition',
        society: 'üèõÔ∏è Society',
        technology: '‚öôÔ∏è Technology',
        philosophy: 'üí≠ Philosophy',
        meta: 'üìã META'
    }
};
---

<BaseLayout
        title={texts.title}
        description={texts.description}
>
    <div class="container">
        <!-- Header -->
        <section class="header-section">
            <h1 class="main-title">{texts.pageTitle}</h1>
            <p class="main-description">
                {texts.pageDescription}
            </p>

            <!-- Stats -->
            <div class="stats-container">
                <div class="stat-item">
                    <div class="stat-title">{texts.nodes}</div>
                    <div class="stat-value stat-primary">{stats.totalNodes}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-title">{texts.connections}</div>
                    <div class="stat-value stat-secondary">{stats.totalEdges}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-title">{texts.categories}</div>
                    <div class="stat-value stat-accent">{stats.categories}</div>
                </div>
                <div class="stat-item">
                    <div class="stat-title">{texts.avgConnections}</div>
                    <div class="stat-value stat-info">{stats.avgConnections}</div>
                </div>
            </div>
        </section>

        <GraphVisualization></GraphVisualization>

        <section>
            <div class="legend-card">
                <div class="legend-body">
                    <h2 class="legend-title">{texts.legend}</h2>

                    <div class="legend-grid">
                        <div>
                            <h3 class="legend-subtitle">{texts.nodeColors}</h3>
                            <div class="legend-items">
                                <div class="legend-item">
                                    <div class="color-dot color-blue"></div>
                                    <span>{texts.categories_info.cognition}</span>
                                </div>
                                <div class="legend-item">
                                    <div class="color-dot color-green"></div>
                                    <span>{texts.categories_info.society}</span>
                                </div>
                                <div class="legend-item">
                                    <div class="color-dot color-yellow"></div>
                                    <span>{texts.categories_info.technology}</span>
                                </div>
                                <div class="legend-item">
                                    <div class="color-dot color-purple"></div>
                                    <span>{texts.categories_info.philosophy}</span>
                                </div>
                                <div class="legend-item">
                                    <div class="color-dot color-red"></div>
                                    <span>{texts.categories_info.meta}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="tips-section">
                        <p class="tips-title"><strong>{texts.tips}</strong></p>
                        <ul class="tips-list">
                            {texts.tipsList.map(tip => (
                                    <li>{tip}</li>
                            ))}
                        </ul>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <style>
        /* Container and Layout */
        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 0 16px;
        }

        /* Header Section */
        .header-section {
            text-align: center;
            margin-bottom: 32px;
        }

        .main-title {
            font-size: 2.25rem;
            font-weight: bold;
            margin-bottom: 16px;
            line-height: 1.2;
        }

        .main-description {
            font-size: 1.25rem;
            opacity: 0.7;
            margin-bottom: 24px;
            line-height: 1.5;
        }

        /* Stats */
        .stats-container {
            display: flex;
            justify-content: center;
            gap: 16px;
            margin-bottom: 24px;
            flex-wrap: wrap;
            background: var(--base-200, #f2f2f2);
            border-radius: 8px;
            padding: 16px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .stat-item {
            text-align: center;
            padding: 16px;
            min-width: 120px;
        }

        .stat-title {
            font-size: 0.875rem;
            opacity: 0.7;
            margin-bottom: 4px;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .stat-primary { color: var(--primary, #3b82f6); }
        .stat-secondary { color: var(--secondary, #f59e0b); }
        .stat-accent { color: var(--accent, #10b981); }
        .stat-info { color: var(--info, #06b6d4); }

        /* Legend */
        .legend-card {
            background: var(--base-100, #ffffff);
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .legend-body {
            padding: 24px;
        }

        .legend-title {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 16px;
        }

        .legend-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 24px;
        }

        .legend-subtitle {
            font-weight: bold;
            margin-bottom: 12px;
        }

        .legend-items {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .color-dot {
            width: 16px;
            height: 16px;
            border-radius: 50%;
        }

        .color-blue { background-color: #3b82f6; }
        .color-green { background-color: #10b981; }
        .color-yellow { background-color: #f59e0b; }
        .color-purple { background-color: #8b5cf6; }
        .color-red { background-color: #ef4444; }

        .tips-section {
            margin-top: 24px;
            font-size: 0.875rem;
            opacity: 0.7;
        }

        .tips-title {
            margin-bottom: 8px;
        }

        .tips-list {
            list-style-type: disc;
            padding-left: 20px;
        }

        .tips-list li {
            margin-bottom: 4px;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 0 8px;
            }

            .main-title {
                font-size: 1.875rem;
            }

            .main-description {
                font-size: 1rem;
            }

            .stats-container {
                flex-direction: column;
                gap: 8px;
            }

            .legend-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</BaseLayout>