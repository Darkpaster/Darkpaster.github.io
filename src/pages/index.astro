---
import BaseLayout from '@/layouts/BaseLayout.astro';
import TopicCard from '@/components/TopicCard.astro';
import { getCollection } from 'astro:content';
import { getLocale } from "astro-i18n-aut";

const currentLang = getLocale(Astro.url);

const allTopics: any[] = await getCollection('topics', ({ data }) => {
	return !data.draft && data.lang === currentLang;
});

const sortedTopics = allTopics.sort((a, b) => {
	if (a.data.level !== b.data.level) {
		return a.data.level - b.data.level;
	}
	return a.data.title.localeCompare(b.data.title, currentLang === 'ru' ? 'ru' : 'en');
});

const topicsByCategory = allTopics.reduce((acc, topic) => {
	const category = topic.data.category || 'other';
	if (!acc[category]) {
		acc[category] = [];
	}
	acc[category].push(topic);
	return acc;
}, {} as Record<string, typeof allTopics>);

const featuredTopics = Object.values(topicsByCategory)
	.flat()
	.filter(topic => topic.data.level <= 2)
	.slice(0, 6);

const stats = {
	totalTopics: allTopics.length,
	categories: Object.keys(topicsByCategory).length,
	avgLevel: Math.round(allTopics.reduce((sum, topic) => sum + topic.data.level, 0) / allTopics.length * 10) / 10
};

const texts = currentLang === 'ru' ? {
	heroTitle: 'HumanityOS',
	heroSubtitle: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–Ω–∏–π –æ –º–∏—Ä–µ: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —É–ª—É—á—à–µ–Ω–∏—é –∫–ª—é—á–µ–≤—ã—Ö —Å–∏—Å—Ç–µ–º',
	startLearning: '–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ',
	aboutProject: '–û –ø—Ä–æ–µ–∫—Ç–µ',
	knowledgeGraph: '–ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π',
	totalTopics: '–í—Å–µ–≥–æ —Ç–µ–º',
	deepAnalysis: '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑',
	categories: '–ö–∞—Ç–µ–≥–æ—Ä–∏–π',
	systematization: '–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
	avgComplexity: '–°—Ä. —Å–ª–æ–∂–Ω–æ—Å—Ç—å',
	outOf5Levels: '–ò–∑ 5 —É—Ä–æ–≤–Ω–µ–π',
	recommendedStart: 'üåü –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–ª—è –Ω–∞—á–∞–ª–∞',
	allTopics: '–í—Å–µ —Ç–µ–º—ã ‚Üí',
	knowledgeCategories: 'üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞–Ω–∏–π',
	allTopicsSection: 'üìñ –í—Å–µ —Ç–µ–º—ã',
	expand: '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å',
	collapse: '–°–≤–µ—Ä–Ω—É—Ç—å',
	moreTopics: '–ò –µ—â—ë {} —Ç–µ–º...',
	categories_info: {
		cognition: { name: '–ü–æ–∑–Ω–∞–Ω–∏–µ', desc: '–ú—ã—à–ª–µ–Ω–∏–µ, –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, —è–∑—ã–∫' },
		society: { name: '–û–±—â–µ—Å—Ç–≤–æ', desc: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã' },
		technology: { name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', desc: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ' },
		philosophy: { name: '–§–∏–ª–æ—Å–æ—Ñ–∏—è', desc: '–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã' },
		meta: { name: 'META', desc: '–û –ø—Ä–æ–µ–∫—Ç–µ –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏' }
	}
} : {
	heroTitle: 'HumanityOS',
	heroSubtitle: 'Alternative knowledge system about the world: critical analysis of modernity and proposals for rational improvement of key systems',
	startLearning: 'Start Learning',
	aboutProject: 'About Project',
	knowledgeGraph: 'Knowledge Graph',
	totalTopics: 'Total Topics',
	deepAnalysis: 'Deep Analysis',
	categories: 'Categories',
	systematization: 'Systematization',
	avgComplexity: 'Avg Complexity',
	outOf5Levels: 'Out of 5 levels',
	recommendedStart: 'üåü Recommended for Start',
	allTopics: 'All Topics ‚Üí',
	knowledgeCategories: 'üìö Knowledge Categories',
	allTopicsSection: 'üìñ All Topics',
	expand: 'Expand',
	collapse: 'Collapse',
	moreTopics: 'And {} more topics...',
	categories_info: {
		cognition: { name: 'Cognition', desc: 'Thinking, perception, language' },
		society: { name: 'Society', desc: 'Social systems and structures' },
		technology: { name: 'Technology', desc: 'Innovation and their impact' },
		philosophy: { name: 'Philosophy', desc: 'Fundamental questions' },
		meta: { name: 'META', desc: 'About project and methodology' }
	}
};
---

<BaseLayout
	title={`HumanityOS - ${currentLang === 'ru' ? '–ì–ª–∞–≤–Ω–∞—è' : 'Home'}`}
	description={currentLang === 'ru' ? '–°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–Ω–∏–π –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∏—Ä–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—é' : 'Knowledge and reflection system: critical analysis of the modern world and proposals for its improvement'}
>
	<section class="hero">
		<div class="hero-content">
			<div class="hero-content-inner">
				<h1 class="hero-title">
					{texts.heroTitle}
				</h1>
				<p class="hero-subtitle">
					{texts.heroSubtitle}
				</p>
				<div class="hero-buttons">
					<a href="#featured" class="btn btn-primary btn-large">
						{texts.startLearning}
					</a>
					<a href=`${currentLang === 'ru' ? '/ru/' : '/'}about` class="btn btn-outline btn-large">
						{texts.aboutProject}
					</a>
					<a href=`${currentLang === 'ru' ? '/ru/' : '/'}graph` class="btn btn-secondary btn-large">
						{texts.knowledgeGraph}
					</a>
				</div>
			</div>
		</div>
	</section>

	<section class="stats-section">
		<div class="stats">
			<div class="stat">
				<div class="stat-figure">
					<svg class="stat-icon" fill="currentColor" viewBox="0 0 20 20">
						<path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
					</svg>
				</div>
				<div class="stat-title">{texts.totalTopics}</div>
				<div class="stat-value stat-value-primary">{stats.totalTopics}</div>
				<div class="stat-desc">{texts.deepAnalysis}</div>
			</div>

			<div class="stat">
				<div class="stat-figure">
					<svg class="stat-icon" fill="currentColor" viewBox="0 0 20 20">
						<path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
					</svg>
				</div>
				<div class="stat-title">{texts.categories}</div>
				<div class="stat-value stat-value-secondary">{stats.categories}</div>
				<div class="stat-desc">{texts.systematization}</div>
			</div>

			<div class="stat">
				<div class="stat-figure">
					<svg class="stat-icon" fill="currentColor" viewBox="0 0 20 20">
						<path fill-rule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clip-rule="evenodd"/>
					</svg>
				</div>
				<div class="stat-title">{texts.avgComplexity}</div>
				<div class="stat-value stat-value-accent">{stats.avgLevel}</div>
				<div class="stat-desc">{texts.outOf5Levels}</div>
			</div>
		</div>
	</section>

	<section id="featured" class="featured-section">
		<div class="section-header">
			<h2 class="section-title">{texts.recommendedStart}</h2>
			<a href="#all-topics" class="btn btn-ghost">
				{texts.allTopics}
			</a>
		</div>

		<div class="topics-grid">
			{featuredTopics.map(topic => (
				<TopicCard
					title={topic.data.title}
					description={topic.data.description}
					slug={`/${currentLang}/topics/${topic.slug}`}
					tags={topic.data.tags}
					level={topic.data.level}
					meme={topic.data.meme}
					category={topic.data.category}
					difficulty={topic.data.difficulty}
				/>
			))}
		</div>
	</section>

	<section class="categories-section">
		<h2 class="section-title">{texts.knowledgeCategories}</h2>

		<div class="categories-grid">
			{Object.entries(topicsByCategory).map(([category, topics]) => {
				const categoryInfo = texts.categories_info[category as keyof typeof texts.categories_info] ||
					{ name: category, desc: currentLang === 'ru' ? '–†–∞–∑–Ω–æ–µ' : 'Other' };

				const categoryIcons = {
					cognition: 'üß†',
					society: 'üèõÔ∏è',
					technology: '‚öôÔ∏è',
					philosophy: 'üí≠',
					meta: 'üìã'
				} as const;

				const icon = categoryIcons[category as keyof typeof categoryIcons] || 'üìÅ';

				return (
					<div class="category-card">
						<div class="card-body">
							<h3 class="card-title">
								<span class="category-icon">{icon}</span>
								{categoryInfo.name}
							</h3>
							<p class="category-desc">{categoryInfo.desc}</p>
							<div class="card-actions">
								<span class="badge badge-outline">{topics.length} {currentLang === 'ru' ? '—Ç–µ–º' : 'topics'}</span>
								<button class="btn btn-primary btn-small" onclick={`toggleCategory('${category}')`}>
									{texts.expand}
								</button>
							</div>

							<div id={`category-${category}`} class="category-topics hidden">
								{topics.slice(0, 8).map(topic => (
									<a
										href={`/topics/${topic.slug}`}
										class="category-topic-link"
									>
										<span class="topic-level-badge">{topic.data.level}</span>
										<span class="topic-title">{topic.data.title}</span>
									</a>
								))}
								{topics.length > 8 && (
									<div class="more-topics-text">
										{texts.moreTopics.replace('{}', String(topics.length - 8))}
									</div>
								)}
							</div>
						</div>
					</div>
				);
			})}
		</div>
	</section>

	<section id="all-topics">
		<h2 class="section-title">{texts.allTopicsSection}</h2>

		<div class="topics-grid">
			{sortedTopics.map(topic => (
				<TopicCard
					title={topic.data.title}
					description={topic.data.description}
					slug={`/topics/${topic.slug}`}
					tags={topic.data.tags}
					level={topic.data.level}
					meme={topic.data.meme}
					category={topic.data.category}
					difficulty={topic.data.difficulty}
				/>
			))}
		</div>
	</section>
</BaseLayout>

<style>
	/* Hero Section */
	.hero {
		min-height: 60vh;
		border-radius: 1rem;
		margin-bottom: 3rem;
		background-image: url(/assets/backgrounds/shutterstock-1558058690-4073813708.webp);
		background-size: cover;
		background-position: center;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.hero-content {
		text-align: center;
		padding: 2rem;
	}

	.hero-content-inner {
		max-width: 64rem;
	}

	.hero-title {
		font-size: 3rem;
		font-weight: bold;
		margin-bottom: 1.5rem;
		background: linear-gradient(to right, #3b82f6, #8b5cf6);
		background-clip: text;
		-webkit-background-clip: text;
		color: transparent;
	}

	.hero-subtitle {
		font-size: 1.25rem;
		margin-bottom: 2rem;
		color: #bfdbfe;
		line-height: 1.625;
		text-shadow: -2px 3px black;
	}

	.hero-buttons {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		gap: 1rem;
	}

	/* Stats Section */
	.stats-section {
		margin-bottom: 3rem;
	}

	.stats {
		display: flex;
		flex-direction: column;
		width: 100%;
		box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
		border-radius: 0.5rem;
		background-color: var(--base-200);
	}

	.stat {
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 1.5rem;
		text-align: center;
	}

	.stat:last-child {
		border-bottom: none;
	}

	.stat-figure {
		margin-bottom: 0.5rem;
	}

	.stat-icon {
		width: 2rem;
		height: 2rem;
		color: #6b7280;
	}

	.stat-title {
		font-size: 0.875rem;
		color: #6b7280;
		margin-bottom: 0.25rem;
	}

	.stat-value {
		font-size: 2rem;
		font-weight: bold;
		margin-bottom: 0.25rem;
	}

	.stat-value-primary {
		color: #3b82f6;
	}

	.stat-value-secondary {
		color: #8b5cf6;
	}

	.stat-value-accent {
		color: #f59e0b;
	}

	.stat-desc {
		font-size: 0.75rem;
		color: #9ca3af;
	}

	/* Sections */
	.featured-section,
	.categories-section {
		margin-bottom: 3rem;
	}

	.section-header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		margin-bottom: 2rem;
	}

	.section-title {
		font-size: 1.875rem;
		font-weight: bold;
		margin-bottom: 2rem;
	}

	/* Grids */
	.topics-grid,
	.categories-grid {
		display: grid;
		grid-template-columns: 1fr;
		gap: 1.5rem;
	}

	/* Category Cards */
	.category-card {
		background-color: var(--base-200);
		box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
		border-radius: 0.5rem;
		transition: border-color 0.2s;
	}

	.category-card:hover {
		border-color: rgba(59, 130, 246, 0.5);
	}

	.card-body {
		padding: 1.5rem;
	}

	.card-title {
		font-size: 1.25rem;
		font-weight: bold;
		margin-bottom: 0.5rem;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.category-icon {
		font-size: 1.5rem;
	}

	.category-desc {
		color: var(--base-content);
		margin-bottom: 1rem;
	}

	.card-actions {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-top: 1rem;
	}

	.category-topics {
		margin-top: 1rem;
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.category-topic-link {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem;
		border-radius: 0.25rem;
		transition: background-color 0.2s;
		font-size: 0.875rem;
		text-decoration: none;
		color: inherit;
	}

	.category-topic-link:hover {
		background-color: var(--base-200);
	}

	.topic-level-badge {
		background: #3b82f6;
		color: var(--base-content);
		padding: 0.125rem 0.375rem;
		border-radius: 0.25rem;
		font-size: 0.75rem;
		font-weight: 500;
	}

	.topic-title {
		flex: 1;
	}

	.more-topics-text {
		text-align: center;
		font-size: 0.875rem;
		color: rgba(0, 0, 0, 0.6);
	}

	/* Buttons */
	.btn {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		padding: 0.5rem 1rem;
		border-radius: 0.375rem;
		font-weight: 500;
		text-decoration: none;
		cursor: pointer;
		border: 1px solid transparent;
		transition: all 0.2s;
	}

	.btn-primary {
		background-color: #3b82f6;
		color: var(--base-content);
	}

	.btn-primary:hover {
		background-color: #2563eb;
	}

	.btn-secondary {
		background-color: #8b5cf6;
		color: var(--base-content);
	}

	.btn-secondary:hover {
		background-color: #7c3aed;
	}

	.btn-outline {
		border-color: #d1d5db;
		background-color: transparent;
	}

	.btn-outline:hover {
		background-color: var(--color-base-content);
	}

	.btn-ghost {
		background-color: transparent;
		color: #6b7280;
	}

	.btn-ghost:hover {
		background-color: #f3f4f6;
	}

	.btn-large {
		padding: 0.75rem 1.5rem;
		font-size: 1.125rem;
	}

	.btn-small {
		padding: 0.375rem 0.75rem;
		font-size: 0.875rem;
	}

	/* Badge */
	.badge {
		display: inline-flex;
		align-items: center;
		padding: 0.25rem 0.5rem;
		border-radius: 0.375rem;
		font-size: 0.75rem;
		font-weight: 500;
	}

	.badge-outline {
		border: 1px solid #d1d5db;
		background-color: transparent;
		color: var(--base-content);
	}

	/* Utility classes */
	.hidden {
		display: none;
	}

	/* Responsive */
	@media (min-width: 768px) {
		.hero-title {
			font-size: 4rem;
		}

		.hero-subtitle {
			font-size: 1.5rem;
		}

		.stats {
			flex-direction: row;
		}

		.stat {
			border-bottom: none;
		}

		.stat:last-child {
			border-right: none;
		}

		.topics-grid,
		.categories-grid {
			grid-template-columns: repeat(2, 1fr);
		}
	}

	@media (min-width: 1024px) {
		.hero-title {
			font-size: 3.75rem;
		}

		.topics-grid,
		.categories-grid {
			grid-template-columns: repeat(3, 1fr);
		}
	}
</style>

<script>
	function toggleCategory(category: string) {
		const element = document.getElementById(`category-${category}`);
		const button = event?.target as HTMLButtonElement;

		if (element && button) {
			const isHidden = element.classList.contains('hidden');
			const currentLang = window.location.pathname.includes('/en/') ? 'en' : 'ru';
			const expandText = currentLang === 'ru' ? '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å' : 'Expand';
			const collapseText = currentLang === 'ru' ? '–°–≤–µ—Ä–Ω—É—Ç—å' : 'Collapse';

			if (isHidden) {
				element.classList.remove('hidden');
				button.textContent = collapseText;
			} else {
				element.classList.add('hidden');
				button.textContent = expandText;
			}
		}
	}

	(window as any).toggleCategory = toggleCategory;
</script>