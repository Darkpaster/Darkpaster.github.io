---
export interface Props {
    title: string;
    description?: string;
    slug: string;
    tags: string[];
    level: number;
    meme?: string;
    category?: string;
    difficulty?: string;
}

const {
    title,
    description,
    slug,
    tags,
    level,
    meme,
    category,
    difficulty
} = Astro.props;

const levelColors = {
    1: 'badge-success',
    2: 'badge-info',
    3: 'badge-warning',
    4: 'badge-error',
    5: 'badge-secondary'
};

const categoryIcons = {
    cognition: 'üß†',
    society: 'üèõÔ∏è',
    technology: '‚öôÔ∏è',
    philosophy: 'üí≠',
    meta: 'üìã'
};
---

<div class="topic-card">
    {meme && (
            <figure class="card-figure">
                <img
                        src={meme}
                        alt={`–ú–µ–º –¥–ª—è —Ç–µ–º—ã: ${title}`}
                        class="card-image"
                        loading="lazy"
                />
            </figure>
    )}

    <div class="card-body">
        <div class="badges-container">
            <span class={`badge level-${level}`}>
                –£—Ä. {level}
            </span>

            {category && (
                    <span class="badge badge-outline">
                        {categoryIcons[category as keyof typeof categoryIcons]} {category}
                    </span>
            )}

            {difficulty && (
                    <span class="badge badge-secondary">
                        {difficulty}
                    </span>
            )}
        </div>

        <h3 class="card-title">
            <a href={slug} class="title-link">
                {title}
            </a>
        </h3>

        {description && (
                <p class="card-description">
                    {description}
                </p>
        )}

        <div class="tags-container">
            {tags.slice(0, 3).map(tag => (
                    <span class="tag">
                        {tag}
                    </span>
            ))}
            {tags.length > 3 && (
                    <span class="tag">
                        +{tags.length - 3}
                    </span>
            )}
        </div>

        <div class="card-actions">
            <a href={slug} class="read-button">
                –ß–∏—Ç–∞—Ç—å
            </a>
        </div>
    </div>
</div>

<style>
    /* Topic Card */
    .topic-card {
        background-color: var(--base-200);
        color: var(--base-content);
        border: 1px solid hsl(var(--b3));
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        overflow: hidden;
    }

    .topic-card:hover {
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border-color: rgba(var(--p-rgb), 0.5);
    }

    /* Card Figure */
    .card-figure {
        padding: 1rem 1rem 0 1rem;
        margin: 0;
    }

    .card-image {
        width: 100%;
        height: 12rem;
        object-fit: cover;
        border-radius: 0.5rem;
    }

    /* Card Body */
    .card-body {
        padding: 1.5rem;
    }

    /* Badges Container */
    .badges-container {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    /* Badge Styles */
    .badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        font-weight: 600;
        border-radius: 9999px;
        white-space: nowrap;
    }

    .badge-outline {
        background-color: transparent;
        color: var(--base-content);
        border: 1px solid hsl(var(--bc));
    }

    .badge-secondary {
        background-color: hsl(var(--s));
        color: var(--base-content);
        font-size: 0.75rem;
    }

    /* Level Badge Colors */
    .level-1 {
        background-color: hsl(var(--su));
        color: hsl(var(--suc));
    }

    .level-2 {
        background-color: hsl(var(--in));
        color: hsl(var(--inc));
    }

    .level-3 {
        background-color: hsl(var(--wa));
        color: hsl(var(--wac));
    }

    .level-4 {
        background-color: hsl(var(--er));
        color: hsl(var(--erc));
    }

    .level-5 {
        background-color: hsl(var(--s));
        color: hsl(var(--sc));
    }

    /* Card Title */
    .card-title {
        font-size: 1.125rem;
        font-weight: bold;
        margin: 0 0 0.5rem 0;
        line-height: 1.4;
    }

    .title-link {
        color: var(--base-content);
        text-decoration: none;
        transition: color 0.2s ease;
    }

    .title-link:hover {
        color: hsl(var(--p));
    }

    /* Card Description */
    .card-description {
        color: var(--base-content);
        font-size: 0.875rem;
        line-height: 1.5;
        margin-bottom: 0.5rem;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    /* Tags Container */
    .tags-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
        margin-top: 0.5rem;
        margin-bottom: 1rem;
    }

    .tag {
        display: inline-block;
        padding: 0.125rem 0.375rem;
        font-size: 0.75rem;
        background-color: rgba(var(--bc-rgb), 0.1);
        color: var(--base-content);
        border-radius: 0.25rem;
    }

    /* Card Actions */
    .card-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 1rem;
    }

    .read-button {
        display: inline-block;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 600;
        background-color: hsl(var(--p));
        color: hsl(var(--pc));
        border: none;
        border-radius: 0.375rem;
        text-decoration: none;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.1s ease;
    }

    .read-button:hover {
        background-color: hsl(var(--pf));
    }

    .read-button:active {
        transform: scale(0.95);
    }

</style>