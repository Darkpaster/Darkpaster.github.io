---
import { getCollection } from 'astro:content';
import { getLocale } from "astro-i18n-aut";

const currentLanguage = getLocale(Astro.url);

const allTopics = await getCollection('topics', ({ data, slug }) =>
    !data.draft && slug.startsWith(currentLanguage)
);

const searchIndex = allTopics.map(topic => ({
  id: topic.slug,
  title: topic.data.title,
  description: topic.data.description || '',
  tags: topic.data.tags || [],
  category: topic.data.category || 'other',
  level: topic.data.level,
  url: `/topics/${topic.slug}`
}));

const i18n = {
  ru: {
    placeholder: '–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞–º, —Ç–µ–≥–∞–º, –æ–ø–∏—Å–∞–Ω–∏—é...',
    noResultsTitle: '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
    noResultsSubtitle: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
    foundText: '–ù–∞–π–¥–µ–Ω–æ',
    ofText: '–∏–∑',
    topicsText: '—Ç–µ–º',
    queryText: '–ø–æ –∑–∞–ø—Ä–æ—Å—É',
    noDescription: '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è',
    level: '–£—Ä–æ–≤–µ–Ω—å',
    categories: {
      cognition: '–ú—ã—à–ª–µ–Ω–∏–µ',
      society: '–û–±—â–µ—Å—Ç–≤–æ',
      technology: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
      philosophy: '–§–∏–ª–æ—Å–æ—Ñ–∏—è',
      meta: '–ú–µ—Ç–∞'
    },
    categoryIcons: {
      cognition: 'üß†',
      society: 'üèõÔ∏è',
      technology: '‚öôÔ∏è',
      philosophy: 'üí≠',
      meta: 'üìã'
    },
    quickFilters: [
      { key: 'level:2', text: '–£—Ä–æ–≤–µ–Ω—å 2' },
      { key: 'level:3', text: '–£—Ä–æ–≤–µ–Ω—å 3' },
      { key: 'level:4', text: '–£—Ä–æ–≤–µ–Ω—å 4' },
      { key: 'level:5', text: '–£—Ä–æ–≤–µ–Ω—å 5' },
      { key: 'category:cognition', text: 'üß† –ú—ã—à–ª–µ–Ω–∏–µ' },
      { key: 'category:society', text: 'üèõÔ∏è –û–±—â–µ—Å—Ç–≤–æ' },
      { key: 'category:technology', text: '‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
      { key: 'category:philosophy', text: 'üí≠ –§–∏–ª–æ—Å–æ—Ñ–∏—è' }
    ],
    searchTerms: {
      level: '—É—Ä–æ–≤–µ–Ω—å'
    }
  },
  en: {
    placeholder: 'Search topics, tags, description...',
    noResultsTitle: 'No results found',
    noResultsSubtitle: 'Try changing your query',
    foundText: 'Found',
    ofText: 'of',
    topicsText: 'topics',
    queryText: 'for query',
    noDescription: 'No description',
    level: 'Level',
    categories: {
      cognition: 'Cognition',
      society: 'Society',
      technology: 'Technology',
      philosophy: 'Philosophy',
      meta: 'Meta'
    },
    categoryIcons: {
      cognition: 'üß†',
      society: 'üèõÔ∏è',
      technology: '‚öôÔ∏è',
      philosophy: 'üí≠',
      meta: 'üìã'
    },
    quickFilters: [
      { key: 'level:2', text: 'Level 2' },
      { key: 'level:3', text: 'Level 3' },
      { key: 'level:4', text: 'Level 4' },
      { key: 'level:5', text: 'Level 5' },
      { key: 'category:cognition', text: 'üß† Cognition' },
      { key: 'category:society', text: 'üèõÔ∏è Society' },
      { key: 'category:technology', text: '‚öôÔ∏è Technology' },
      { key: 'category:philosophy', text: 'üí≠ Philosophy' }
    ],
    searchTerms: {
      level: 'level'
    }
  }
};

const t = i18n[currentLanguage];
---

<div class="search-container">
  <div class="search-container relative">
    <div class="input-group">
      <input
          type="text"
          placeholder={t.placeholder}
          class="input"
          id="search-input"
          autocomplete="off"
      />
      <button class="btn btn-square btn-primary" id="search-button">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </button>
    </div>
  </div>

  <div id="search-results" class="absolute top-full left-0 right-0 mt-2 bg-base-100 border border-base-300 rounded-lg shadow-lg max-h-96 overflow-y-auto z-50 hidden">
    <div id="results-container" class="p-2">
    </div>
    <div id="no-results" class="p-4 text-center text-base-content/60 hidden">
      <div class="text-2xl mb-2">üîç</div>
      <p>{t.noResultsTitle}</p>
      <p class="text-sm">{t.noResultsSubtitle}</p>
    </div>
    <div id="search-stats" class="px-4 py-2 border-t border-base-300 text-xs text-base-content/60 bg-base-200/50">
    </div>
  </div>

  <div class="flex flex-wrap gap-2 mt-3" id="quick-filters">
    {t.quickFilters.map(filter => (
        <button class="btn btn-xs btn-outline" data-filter={filter.key}>
          {filter.text}
        </button>
    ))}
  </div>
</div>

<style>
  /* ====== –ü–∞–ª–∏—Ç—Ä–∞ ====== */
  :root{
    --color-primary:#3b82f6;
    --color-secondary:#a855f7;
    --color-success:#22c55e;
    --color-info:#3b82f6;
    --color-warning:#eab308;
    --color-error:#ef4444;
    --color-warning-content:#713f12;
  }

  /* ====== –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ====== */
  .search-container{
    position: relative;
  }

  /* ====== –§–æ—Ä–º—ã ====== */
  .search-container .form-control{ margin-bottom:1rem; }
  .search-container .input-group{ display:flex; }
  .search-container .input{
    padding:.5rem 1rem; border:1px solid var(--base-content);
    border-radius:.375rem; width:100%; font-size:.875rem;
  }
  .search-container .input:focus{
    outline:none; border-color:var(--color-primary);
    box-shadow:0 0 0 2px rgba(59,130,246,.25);
  }

  /* ====== –ö–Ω–æ–ø–∫–∏ ====== */
  .search-container .btn{
    padding:.5rem 1rem; background:var(--color-base-100); color: var(--base-content);
    border:none; border-radius:.375rem; cursor:pointer;
    font-size:.875rem; display:inline-flex; align-items:center; justify-content:center;
    transition:background-color .2s;
  }
  .search-container .btn:hover{ border-color: #2563eb; }
  .search-container .btn-outline{
    background: transparent; border: 1px solid var(--color-base-300); color: var(--base-content);
  }
  .search-container .btn-outline:hover{ color: var(--color-primary); }
  .search-container .btn-xs{ padding:.25rem .5rem; font-size:.75rem; }
  .search-container .btn-square{ padding:.5rem; width:auto; }
  .search-container .btn-primary{ background: var(--color-primary); }

  /* ====== –ë–µ–π–¥–∂–∏ ====== */
  .search-container .badge{
    display:inline-flex; align-items:center; justify-content:center;
    padding:.125rem .5rem; font-size:.75rem; border-radius:9999px; font-weight:500;
  }
  .search-container .badge-xs { padding:.125rem .25rem; font-size:.625rem; }
  .search-container .badge-success{ background:var(--color-success); color:#fff; }
  .search-container .badge-info{ background:var(--color-info); color:#fff; }
  .search-container .badge-warning{ background:var(--color-warning); color:#fff; }
  .search-container .badge-error{ background:var(--color-error); color:#fff; }
  .search-container .badge-secondary{ background:var(--color-secondary); color:#fff; }
  .search-container .badge-ghost{ background: transparent; color:var(--color-base-100); }
  .search-container .badge-outline{ background: var(--base-100); border:1px solid var(--color-base-300); color:var(--color-base-content); }

  /* ====== –¶–≤–µ—Ç/—Ñ–æ–Ω/–±–æ—Ä–¥–µ—Ä ====== */
  .search-container .bg-base-100{ background:var(--base-100); }
  .search-container .bg-base-200\/50{ background:rgba(243,244,246,.5); }
  .search-container .bg-warning\/30{ background:rgba(234,179,8,.3); }
  .search-container .text-warning-content{ color:var(--color-warning-content); }
  .search-container .border{ border-width:1px; }
  .search-container .border-base-300{ border-color:var(--color-base-300); }
  .search-container .border-t{ border-top-width:1px; }
  .search-container .text-base-content\/60{ color:rgba(17,24,39,.6); }
  .search-container .text-base-content\/70{ color:rgba(17,24,39,.7); }

  /* ====== –£—Ç–∏–ª–∏—Ç—ã —Ä–∞–∑–º–µ—Ä–∞/–ø–æ–∑–∏—Ü–∏–∏/—Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏ ====== */
  .search-container .w-5{ width:1.25rem; }
  .search-container .h-5{ height:1.25rem; }
  .search-container .absolute{ position:absolute; }
  .search-container .top-full{ top:100%; }
  .search-container .left-0{ left:0; }
  .search-container .right-0{ right:0; }
  .search-container .mt-2{ margin-top:.5rem; }
  .search-container .mt-3{ margin-top:.75rem; }
  .search-container .mb-2{ margin-bottom:.5rem; }
  .search-container .p-2{ padding:.5rem; }
  .search-container .p-4{ padding:1rem; }
  .search-container .px-4{ padding-left:1rem; padding-right:1rem; }
  .search-container .py-2{ padding-top:.5rem; padding-bottom:.5rem; }
  .search-container .text-center{ text-align:center; }
  .search-container .text-2xl{ font-size:1.5rem; line-height:2rem; }
  .search-container .text-sm{ font-size:.875rem; }
  .search-container .text-xs{ font-size:.75rem; }
  .search-container .rounded-lg{ border-radius:.5rem; }
  .search-container .shadow-lg{
    box-shadow:0 10px 15px -3px rgba(0,0,0,.1), 0 4px 6px -2px rgba(0,0,0,.05);
  }
  .search-container .max-h-96{ max-height:24rem; }
  .search-container .overflow-y-auto{ overflow-y:auto; }
  .search-container .z-50{ z-index:50; }
  .search-container .flex{ display:flex; }
  .search-container .flex-wrap{ flex-wrap:wrap; }
  .search-container .gap-2{ gap:.5rem; }
  .search-container .gap-1{ gap:.25rem; }
  .search-container .items-start{ align-items:flex-start; }
  .search-container .items-center{ align-items:center; }
  .search-container .justify-between{ justify-content:space-between; }
  .search-container .font-semibold{ font-weight:600; }
  .search-container .hover\:text-primary:hover{ color:var(--color-primary); }
  .search-container .transition-colors{ transition:color .2s; }
  .search-container .ml-2{ margin-left:.5rem; }
  .search-container .hidden{ display:none; }

  /* ====== –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ====== */
  .search-container .search-result-item{
    padding:.75rem; border-bottom:1px solid var(--color-base-300); cursor:pointer;
  }
  .search-container .search-result-item:last-child{ border-bottom:none; }
  .search-container .search-result-item:hover,
  .search-container .search-result-item.active{ background:var(--base-100); }

  /* ====== –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ ====== */
  .search-container .line-clamp-2{
    display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; overflow:hidden;
  }
</style>


<script define:vars={{ searchIndex, currentLanguage, t }}>
  class TopicSearch {
    constructor(searchIndex, currentLanguage, translations) {
      this.searchIndex = searchIndex;
      this.language = currentLanguage;
      this.t = translations;

      // DOM elements
      this.searchInput = document.getElementById('search-input');
      this.searchButton = document.getElementById('search-button');
      this.searchResults = document.getElementById('search-results');
      this.resultsContainer = document.getElementById('results-container');
      this.noResults = document.getElementById('no-results');
      this.searchStats = document.getElementById('search-stats');
      this.quickFilters = document.querySelectorAll('[data-filter]');

      // State
      this.currentQuery = '';
      this.currentResults = [];

      this.init();
    }

    init() {
      // Search events
      this.searchInput.addEventListener('input', this.debounce(this.handleSearch.bind(this), 300));
      this.searchInput.addEventListener('focus', this.handleFocus.bind(this));
      this.searchInput.addEventListener('keydown', this.handleKeydown.bind(this));
      this.searchButton.addEventListener('click', this.handleSearch.bind(this));

      // Quick filters
      this.quickFilters.forEach(filter => {
        filter.addEventListener('click', this.handleQuickFilter.bind(this));
      });

      // Global events
      document.addEventListener('click', this.handleClickOutside.bind(this));
      document.addEventListener('keydown', this.handleGlobalKeydown.bind(this));
    }

    handleSearch() {
      const query = this.searchInput.value.trim();

      if (query.length < 2) {
        this.hideResults();
        return;
      }

      this.currentQuery = query;
      this.currentResults = this.performSearch(query);
      this.displayResults();
    }

    handleFocus() {
      if (this.currentResults.length > 0) {
        this.showResults();
      }
    }

    handleKeydown(e) {
      const resultItems = this.resultsContainer.querySelectorAll('.search-result-item');
      const activeItem = this.resultsContainer.querySelector('.search-result-item.active');

      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          this.navigateResults(resultItems, activeItem, 1);
          break;
        case 'ArrowUp':
          e.preventDefault();
          this.navigateResults(resultItems, activeItem, -1);
          break;
        case 'Enter':
          e.preventDefault();
          if (activeItem) {
            const link = activeItem.querySelector('a');
            if (link) link.click();
          }
          break;
        case 'Escape':
          this.hideResults();
          this.searchInput.blur();
          break;
      }
    }

    handleGlobalKeydown(e) {
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        this.searchInput.focus();
      }
    }

    handleClickOutside(e) {
      if (!e.target.closest('.search-container')) {
        this.hideResults();
      }
    }

    handleQuickFilter(e) {
      const filter = e.target.dataset.filter;
      const [type, value] = filter.split(':');

      let filterQuery = '';
      if (type === 'level') {
        filterQuery = `${this.t.searchTerms.level} ${value}`;
      } else if (type === 'category') {
        filterQuery = this.t.categories[value] || value;
      }

      this.searchInput.value = filterQuery;
      this.handleSearch();
      this.searchInput.focus();
    }

    performSearch(query) {
      const queryLower = query.toLowerCase();
      const queryWords = queryLower.split(' ').filter(word => word.length > 0);

      return this.searchIndex
          .map(topic => {
            let score = 0;
            const searchText = `${topic.title} ${topic.description} ${topic.tags.join(' ')} ${topic.category}`.toLowerCase();

            // Title exact match (highest priority)
            if (topic.title.toLowerCase().includes(queryLower)) {
              score += 10;
            }

            // Title word match
            queryWords.forEach(word => {
              if (topic.title.toLowerCase().includes(word)) {
                score += 5;
              }
            });

            // Description match
            if (topic.description && topic.description.toLowerCase().includes(queryLower)) {
              score += 3;
            }

            // Tags match
            topic.tags.forEach(tag => {
              if (tag.toLowerCase().includes(queryLower)) {
                score += 4;
              }
            });

            // General content match
            queryWords.forEach(word => {
              if (searchText.includes(word)) {
                score += 1;
              }
            });

            // Level filter
            const levelTerm = this.t.searchTerms.level;
            if (queryLower.includes(levelTerm)) {
              const levelMatch = queryLower.match(/(\d+)/);
              if (levelMatch && parseInt(levelMatch[1]) === topic.level) {
                score += 8;
              }
            }

            return { ...topic, score };
          })
          .filter(topic => topic.score > 0)
          .sort((a, b) => b.score - a.score)
          .slice(0, 10);
    }

    displayResults() {
      if (this.currentResults.length === 0) {
        this.showNoResults();
        return;
      }

      this.resultsContainer.innerHTML = '';
      this.noResults.classList.add('hidden');

      this.currentResults.forEach((topic, index) => {
        const item = this.createResultItem(topic, index === 0);
        this.resultsContainer.appendChild(item);
      });

      this.updateStats();
      this.showResults();
    }

    createResultItem(topic, isFirst = false) {
      const item = document.createElement('div');
      item.className = `search-result-item ${isFirst ? 'active' : ''}`;

      const levelColors = {
        1: 'badge-success',
        2: 'badge-info',
        3: 'badge-warning',
        4: 'badge-error',
        5: 'badge-secondary'
      };

      const categoryIcon = this.t.categoryIcons[topic.category] || 'üìÅ';
      const categoryName = this.t.categories[topic.category] || topic.category;

      item.innerHTML = `
        <a href="${topic.url}" class="block">
          <div class="flex items-start justify-between mb-2">
            <h4 class="font-semibold text-sm hover:text-primary transition-colors">
              ${this.highlightQuery(topic.title)}
            </h4>
            <div class="flex gap-1 ml-2">
              <span class="badge badge-xs ${levelColors[topic.level] || 'badge-outline'}">
                ${topic.level}
              </span>
            </div>
          </div>
          <p class="text-xs text-base-content/70 mb-2 line-clamp-2">
            ${this.highlightQuery(topic.description || this.t.noDescription)}
          </p>
          <div class="flex items-center gap-2">
            <span class="text-xs text-base-content/60">
              ${categoryIcon} ${categoryName}
            </span>
            <div class="flex flex-wrap gap-1">
              ${topic.tags.slice(0, 3).map(tag =>
          `<span class="badge badge-xs badge-ghost">${tag}</span>`
      ).join('')}
            </div>
          </div>
        </a>
      `;

      item.addEventListener('mouseenter', () => {
        this.clearActiveStates();
        item.classList.add('active');
      });

      return item;
    }

    highlightQuery(text) {
      if (!this.currentQuery || !text) return text;

      const queryWords = this.currentQuery.toLowerCase().split(' ').filter(word => word.length > 1);
      let highlightedText = text;

      queryWords.forEach(word => {
        const regex = new RegExp(`(${word})`, 'gi');
        highlightedText = highlightedText.replace(regex, '<mark class="bg-warning/30 text-warning-content">$1</mark>');
      });

      return highlightedText;
    }

    navigateResults(items, activeItem, direction) {
      if (!items.length) return;

      let newIndex = 0;

      if (activeItem) {
        const currentIndex = Array.from(items).indexOf(activeItem);
        newIndex = currentIndex + direction;

        if (newIndex < 0) newIndex = items.length - 1;
        if (newIndex >= items.length) newIndex = 0;
      }

      this.clearActiveStates();
      items[newIndex].classList.add('active');
      items[newIndex].scrollIntoView({ block: 'nearest' });
    }

    clearActiveStates() {
      this.resultsContainer.querySelectorAll('.search-result-item').forEach(el => {
        el.classList.remove('active');
      });
    }

    showResults() {
      this.searchResults.classList.remove('hidden');
    }

    hideResults() {
      this.searchResults.classList.add('hidden');
    }

    showNoResults() {
      this.resultsContainer.innerHTML = '';
      this.noResults.classList.remove('hidden');
      this.updateStats();
      this.showResults();
    }

    updateStats() {
      const count = this.currentResults.length;
      const totalTopics = this.searchIndex.length;

      this.searchStats.innerHTML = `
        ${this.t.foundText}: <strong>${count}</strong> ${this.t.ofText} ${totalTopics} ${this.t.topicsText}
        ${this.currentQuery ? `${this.t.queryText} "<em>${this.currentQuery}</em>"` : ''}
      `;
    }

    debounce(func, delay) {
      let timeoutId;
      return (...args) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
      };
    }
  }

  // Initialize search when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new TopicSearch(searchIndex, currentLanguage, t);
  });
</script>